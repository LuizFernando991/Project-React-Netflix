{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programa\\xE7\\xE3o\\\\React.js\\\\Projeto-Netflix\\\\app\\\\src\\\\templates\\\\Home\\\\Index.jsx\",\n    _s = $RefreshSig$();\n\nimport { getHomeList, getMovie } from '../../helpers/apiHelper';\nimport { useClickOut } from '../../helpers/useClickOut';\nimport { useEffect, useState, useRef } from 'react';\nimport * as Styled from './styles';\nimport { MovieRow } from '../../components/MovieRow';\nimport { HighLightMovie } from '../../components/HighLightMovie';\nimport { Header } from '../../components/Header';\nimport { Footer } from '../../components/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [movieData, setMovieData] = useState(null);\n  const [isOpen, setIsOpen] = useState(true);\n  const overviewRef = useRef(null);\n  useEffect(() => {\n    const loadAll = async () => {\n      const apiData = await getHomeList();\n      setData(data => apiData);\n      let originals = apiData.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenMovie = await getMovie(chosen.id, 'tv');\n      setMovieData(d => chosenMovie);\n    };\n\n    loadAll();\n    return () => {\n      setData(data => []);\n      setMovieData(null);\n    };\n  }, []);\n  useClickOut(setIsOpen, overviewRef.current);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Styled.Container, {\n      isOpen: isOpen,\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), movieData && /*#__PURE__*/_jsxDEV(HighLightMovie, {\n        item: movieData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Styled.Lists, {\n        children: data.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(MovieRow, {\n            title: item.title,\n            items: item.items\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Styled.OverViewContainer, {\n      children: /*#__PURE__*/_jsxDEV(Styled.OverView, {\n        ref: overviewRef,\n        isOpen: isOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"yD0YuY34wkI9k+AcAs2SAi/DopM=\", false, function () {\n  return [useClickOut];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/Programação/React.js/Projeto-Netflix/app/src/templates/Home/Index.jsx"],"names":["getHomeList","getMovie","useClickOut","useEffect","useState","useRef","Styled","MovieRow","HighLightMovie","Header","Footer","App","data","setData","movieData","setMovieData","isOpen","setIsOpen","overviewRef","loadAll","apiData","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenMovie","id","d","current","map","item","title"],"mappings":"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","sourcesContent":["import { getHomeList, getMovie } from '../../helpers/apiHelper'\nimport { useClickOut } from '../../helpers/useClickOut'\nimport { useEffect, useState, useRef } from 'react'\n\nimport * as Styled from './styles'\n\nimport { MovieRow } from '../../components/MovieRow'\nimport { HighLightMovie } from '../../components/HighLightMovie'\nimport { Header } from '../../components/Header'\nimport { Footer } from '../../components/Footer'\n\nfunction App(){\n\n  const [ data, setData ] = useState([])\n  const [ movieData, setMovieData ] = useState(null)\n  const [ isOpen, setIsOpen ] = useState(true)\n\n  const overviewRef = useRef(null)\n \n\n\n\n  useEffect( () => {\n    \n    const loadAll = async ()=>{\n\n      const apiData = await getHomeList()\n      setData(data => apiData)\n\n      let originals = apiData.filter((i)=>i.slug === 'originals')\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let chosen = originals[0].items.results[randomChosen]\n      let chosenMovie = await getMovie(chosen.id, 'tv')\n\n      setMovieData(d => chosenMovie)\n      \n    }\n\n    loadAll()\n\n    return ()=> {\n      setData(data => [])\n      setMovieData(null)\n    }\n    \n  }, []);\n  \n  \n\n  useClickOut(setIsOpen, overviewRef.current)\n\n\n\n  return(\n    <>\n      <Styled.Container isOpen={isOpen}>\n        \n        <Header /> \n        { movieData &&\n          <HighLightMovie item={movieData}/>\n        }\n        <Styled.Lists>\n          {\n            data.map((item, i)=>{\n              return(\n                <MovieRow key={i} title={item.title} items={item.items}/>\n            )})\n          }\n        </Styled.Lists>\n        <Footer/>\n        \n        \n      </Styled.Container>\n      <Styled.OverViewContainer>\n        <Styled.OverView ref={overviewRef} isOpen={isOpen}/>\n      </Styled.OverViewContainer>\n      \n  </>\n  )\n\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}